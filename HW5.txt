//Submitted by Vishnu Prasad Vishwanathan, 793782749, vvishwan@syr.edu
//HW5 CSE674
//Due: Sunday (Nov. 5) at 11:59PM
//You need to implement the following three functions
//
//void merge_sort(node * p, int i);
//void merge(node * p1, int i1, node * p2, int i2);
//void merge_sort(vector<int> &V);
//Read the requirements stated below.


#include <iostream>
#include <list>
#include <vector>

using namespace std;

class node {
public:
	int value;
	node * next;
	node() { next = nullptr; }
	node(int i) { value = i; next = nullptr; }
};


class linked_list {
public:
	int num_nodes;
	node * head;
	linked_list() { num_nodes = 0; head = nullptr; }
	void make_list(int k, int m);
	void print();
	void merge_sort(node * p, int i);
	void merge(node * p1, int i1, node * p2, int i2);

};

void linked_list::make_list(int k, int m) {
	for (int i = 0; i < k; i++) {
		node * p = new node(rand() % m);
		p->next = head;
		head = p;
		num_nodes++;
	}
}

void linked_list::print() {
	node * p = head;
	cout << endl;
	while (p != nullptr) {
		cout << p->value << " ";
		p = p->next;
	}
}



void linked_list::merge_sort(node * p, int i)
{
	node *start = p;
	if (i>1)
	{
		int mid_val = (i / 2);
		for (int j = 1; j < mid_val; j++)
		{
			p = p->next;
		}
		node *r = p->next;
		//p->next = nullptr;
		p = start;
		int rl = i - mid_val;
		merge_sort(p, mid_val);
		merge_sort(r, rl);

		merge(p, (i / 2), r, rl);
	}

}

void linked_list::merge(node * p1, int i1, node * p2, int i2) {

	int p1count = 1;
	int p2count = 1;
	node *p1start = new node(0);
	p1start->next = p1;
	node *p2start = new node(0);
	p2start->next = p2;
	int num1 = 0, num2 = 0;
	node*temp = new node(0);
	while (p1count <= i1 && p2count <= i2)
	{
		if (p1start->next->value > p2start->next->value)
		{
			{
				num1 = p2start->next->value;
				num2 = num1;
				temp->next = p1start->next;
				while (temp->next->value != p2start->next->value)
				{
					num1 = num2;
					num2 = temp->next->value;
					temp->next->value = num1;
					temp->next = temp->next->next;
				}
				if (temp->next->value == p1start->next->value)
				{
					temp->next->value = num2;
				}
				p2start->next = p2start->next->next;
				p1start = p1start->next;
				p2count++;
			}
		}
		else
		{

			p1start = p1start->next;
			p1count++;
		}
	}

}


void vector_merge(vector<int> &V, int left_val, int mid_val, int end_val)
{
	int i, j, main_iter;
	int lim1 = mid_val - left_val + 1;
	int lim2 = end_val - mid_val;
	vector<int> sub_vec1, sub_vec2;
	for (int i = 0; i < lim1; i++) { sub_vec1.push_back(0); }
	for (int i = 0; i < lim2; i++) { sub_vec2.push_back(0); }
	for (i = 0; i < lim1; i++)
		sub_vec1[i] = V[left_val + i];
	for (j = 0; j < lim2; j++)
		sub_vec2[j] = V[mid_val + 1 + j];

	i = 0;
	j = 0;
	main_iter = left_val;
	while (i < lim1 && j < lim2) {
		if (sub_vec1[i] <= sub_vec2[j]) {
			V[main_iter] = sub_vec1[i];
			i++;
		}
		else {
			V[main_iter] = sub_vec2[j];
			j++;
		}
		main_iter++;
	}

	while (i < lim1) {
		V[main_iter] = sub_vec1[i];
		i++;
		main_iter++;
	}
	while (j < lim2) {
		V[main_iter] = sub_vec2[j];
		j++;
		main_iter++;
	}
}
void merge_sort(vector<int> &V)
{
	int n = V.size();
	int size_val;

	int left_val;

	for (size_val = 1; size_val <= n - 1; size_val = 2 * size_val)
	{
		for (left_val = 0; left_val<n - 1; left_val += 2 * size_val)
		{
			int mid_val = 0;
			if (left_val + size_val - 1 < n - 1) { mid_val = left_val + size_val - 1; }
			else { mid_val = n - 1; }
			int end_val = 0;
			if (left_val + 2 * size_val - 1 < n - 1) { end_val = left_val + 2 * size_val - 1; }
			else { end_val = n - 1; }

			vector_merge(V, left_val, mid_val, end_val);
		}
	}
}



void make_random_vector(vector<int> &V, int k, int m) {
	for (int i = 0; i < k; i++) V.push_back(rand() % m);
}
int main() {

	vector<int> V;
	make_random_vector(V, 50, 40);
	cout << endl;
	for (size_t i = 0; i < V.size(); i++) cout << V[i] << " ";
	merge_sort(V);
	cout << endl;
	for (size_t i = 0; i < V.size(); i++) cout << V[i] << " ";


	linked_list L1;
	L1.make_list(30, 20);
	L1.print();
	L1.merge_sort(L1.head, L1.num_nodes);
	L1.print();

	getchar();
	getchar();
	return 0;
}

