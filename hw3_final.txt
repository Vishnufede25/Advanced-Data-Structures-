//Advanced Data Structures : HomeWork 3.
//Submitted by : Vishnu Prasad Vishwanathan - 793782749 , vvishwan@syr.edu
// ADSHW3.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"


//Dijkstra's algorithm by C-Y (Roger) Chen, Syracuse University
//Implemented with min-Heap
//Time Complexity O((N + E) log N)

#include <iostream>
#include <vector>
#include <fstream>
using namespace std;
class e_node { //stands for edge node
public:
	int nb;//the neighbor of a currently considered node
	int weight; //weight of the edge to the above neighbor
	e_node() {}//constructor
};
class rt_node { //rt stands for routing table
public:
	int cost;  //cost to a node
	int from;  //the from node to this node
	int checked;
	int h_pos; //the postion in heap for this node
	rt_node() { from = -1;  cost = 9999;  checked = 0; }
};

class h_node { //stands for heap_node
public:
	int id;
	int cost;
	h_node() { id = -1; cost = 9999; }
	h_node(int i, int j) { id = i; cost = j; }
	bool operator<(h_node h) { return (cost < h.cost); }
};

void set_up(vector<rt_node> &rt, vector<h_node> & heap, int &start); //Insert the souce node to heap and update rt and heap accordingly
void heap_adjust_up(vector<rt_node> &rt, vector<h_node> & heap, int &n);
void heap_adjust_down(vector<rt_node> & rt, vector<h_node> & heap);
void heap_op(vector<vector<e_node>> & graph, vector<rt_node> & rt, vector<h_node> &heap);

int main() {

	ifstream in("text1.txt");
	int start;
	in >> start;//source node for the Dijkstra's algorithm
	int n, e; //n: num of nodes ; e: num of edges
	in >> n >> e;
	vector<e_node> ve;
	vector<vector<e_node> > graph(n, ve);
	e_node e1;
	int n1, n2, w;
	for (int i = 0; i < e; i++) {
		in >> n1 >> n2 >> w;
		e1.nb = n2;
		e1.weight = w;
		graph[n1].push_back(e1);
	}
	in.close();
	vector<rt_node> rt(n); //rt stands for routing table
	vector<h_node> heap(n);
	
	set_up(rt, heap, start);
	heap_op(graph, rt, heap);
	
	for (int i = 0; i < n; i++) {

		cout << "cost from" << start << " to " << i << " is: " << rt[i].cost << "  from node is " << rt[i].from << endl;
	}
	getchar();
	getchar();
	return 0;
}


void set_up(vector<rt_node> &rt, vector<h_node> & heap, int &start) {

	rt[start].from = start;
	rt[start].cost = 0;
	for (size_t i = 0; i < heap.size(); i++) {
		heap[i].id = i;
		rt[i].h_pos = i;
	}
	heap[start].id = 0;
	heap[0].id = start;
	heap[0].cost = 0;
	rt[0].h_pos = start;
	rt[start].h_pos = 0;
}



void heap_adjust_down(vector<rt_node> & rt, vector<h_node> & heap) 
{
	bool heap_done = false, swap_done = false;;
	int minIndex = 0;
	int index = 0;
	while (heap_done == false) 
	{	
	    index = minIndex;
		
		int length = heap.size();
		int leftChildIndex = 2 * index + 1;
		int rightChildIndex = 2 * index + 2;

		
		if (leftChildIndex >= length)
			return; 

		 minIndex=index;

		if (heap[leftChildIndex] < heap[index])
		{
			minIndex = leftChildIndex;
		}

		if ((length > rightChildIndex) && (heap[rightChildIndex] < heap[minIndex]))
		{
			minIndex = rightChildIndex;
		}

		if (minIndex != index)
		{
			h_node temp;
			temp = heap[index];
			heap[index] = heap[minIndex];
			heap[minIndex] = temp;
			heap_done = false;
			swap_done = true;
		}
		else {
			heap_done = true;
		}
	}
}

void heap_adjust_up(vector<rt_node> & rt, vector<h_node> & heap, int &n)
{
	bool heap_done = false;
	
	for (int i = 0; i < heap.size(); i++)
	{
		int index = i;
		heap_done = false;
		while (heap_done == false)
		{
			
			int parentIndex = (index - 1) / 2;
			if (heap[index].cost < heap[parentIndex].cost)
			{
				h_node temp;
				temp = heap[parentIndex];
				heap[parentIndex] = heap[index];
				heap[index] = temp;
				index = parentIndex;
				heap_done = false;
			}
			else
				heap_done = true;
			
		}
	}
}

void heap_op(vector<vector<e_node>> & graph, vector<rt_node> & rt, vector<h_node> &heap) 
{
	int p = 0;
	h_node main_start;
	main_start.cost= heap[0].cost;
	main_start.id = heap[0].id;
	int n5 = main_start.id;
	int length = heap.size();
	int addtort = 0;
	if (length == 0)
	{
		return;
	}

	h_node start_hn = heap[0];
	heap[0] = heap[length - 1];
	heap[length - 1] = start_hn;
    heap.pop_back();
	main_start.id = start_hn.id;
	main_start.cost = start_hn.cost;
	heap.resize(length - 1);
	rt[start_hn.id].checked = 1;
	heap_adjust_down(rt, heap);
	e_node e1;
	int n1 = start_hn.id;
	e1.weight = start_hn.cost;
	int i = main_start.id;
	while(i < rt.size())
	{
		for (int j = 0; j < graph[i].size(); j++) 
		{
			if (i == main_start.id)
			{
				if (rt[graph[i][j].nb].checked == 0)
				{
					if (rt[graph[i][j].nb].cost == 9999)
					{
						rt[graph[i][j].nb].from = start_hn.id;
						rt[graph[i][j].nb].cost = graph[i][j].weight;
						for (int k = 0; k < heap.size(); k++) {
							if (heap[k].id == graph[i][j].nb) {
								heap[k].cost = graph[i][j].weight;
								rt[graph[i][j].nb].h_pos = heap[k].id;
								break;
							}
						}
						int n = graph[i][j].nb;
						heap_adjust_up(rt, heap, n);
						}
				}
			}

			else {
						if (rt[graph[i][j].nb].checked != 1)
						{
							{
								if (rt[graph[i][j].nb].cost > (start_hn.cost + graph[i][j].weight))
								{
									rt[graph[i][j].nb].from = i;
									rt[graph[i][j].nb].cost = (start_hn.cost + graph[i][j].weight);
									for (int k = 0; k < heap.size(); k++)
									{
										if (rt[graph[i][j].nb].h_pos == heap[k].id)
										{
											heap[k].cost = rt[graph[i][j].nb].cost;
											break;
										}
									}
									int n = graph[i][j].nb-1;
									heap_adjust_up(rt, heap, n);

								}
							}
				     }
			}
		}

		
		int length = heap.size();
		int addtort = 0;
		if (length == 0)
		{
			return;
		}
		 start_hn.id = heap[0].id;
		 start_hn.cost = heap[0].cost;
		heap[0] = heap[length - 1];
		heap[length - 1] = start_hn;
		heap.pop_back();
		heap.resize(length - 1);
		rt[start_hn.id].checked = 1;
		heap_adjust_down(rt, heap);
		i = start_hn.id;
	}
}

