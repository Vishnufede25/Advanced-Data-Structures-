#include <iostream> 
#include <algorithm> 

using namespace std;

//You need to use the following node class for each node of the AVL tree
class node {
public:
	int value;
	int height;
	int child; //0: this node is a left child of its parent; 1: right child; -1 this node is the tree root
	node * parent;
	node * l_child;
	node * r_child;
	node() {}
	node(int i) { value = i; height = 1; parent = l_child = r_child = nullptr; }

};

class avl_tree {
public:
	node * root;
	avl_tree() {
		root = nullptr;
	}
	void add_node(int i);//You need to implement this.
	void in_order_traversal(node *p);  //provided.
	node * height_adjustment(node *p, int &pattern); //You need to implement this

	void L_Rotate(node *p); //You need to implement this.
							//p points to the node around which the rotation will be performed.

	void R_Rotate(node *p); //You need to implement this.
							//p points to the node around which the rotation will be performed.

	void remove_node(int i);// You need to implement this.
							//Remove the node with value i.  Assume that all node values are distinct.


	node * replace(node * p1);
	};

void avl_tree::L_Rotate(node *p)
{
	int h = 0;
	node * temp = p->parent;
	p->parent = temp->parent;
	int childside = 0;
	childside = temp->child;
	if (temp == root)
	{
		root = p;
		root->child = -1;
	}
	else if (childside == 0)
	{
		p->parent->l_child = p;
		p->child = 0;
		p->height++;
	}
	else
	{
		p->parent->r_child = p;
		p->child = 1;
		p->height++;
	}
	if (p->l_child != nullptr)
	{
		temp->r_child = p->l_child;
		temp->r_child->parent = temp;
		temp->r_child->child = 1;
		p->l_child = temp;
		temp->parent = p;
		temp->child = 0;

	}
	else
	{
		temp->r_child = nullptr;
		temp->height = 1;
		p->l_child = temp;
		temp->parent = p;
		temp->child = 0;
	}

	node * temp2 = temp;
	bool heightDone = false;
	while (heightDone == false)
	{
		int h1 = 0, h2 = 0;
		if (temp2->l_child != nullptr)
		{
			h1 = temp2->l_child->height;
		}
		if (temp2->r_child != nullptr)
			h2 = temp2->r_child->height;

		if (h1 == 0 && h2 == 0)
		{
			temp2->height = 1;
		}
		else if (h2 >= h1)
			temp2->height = h2 + 1;
		else
			temp2->height = h1 + 1;

		if (temp2->parent != nullptr)
			temp2 = temp2->parent;
		else
			heightDone = true;
	}


}

void avl_tree::R_Rotate(node *p)
{

	node * temp = p->parent;
	int childside = 0;
	childside = temp->child;
	p->parent = temp->parent;
	if (temp == root)
	{
		root = p;
		root->child = -1;
	}
	else if (childside == 0)
	{
		p->parent->l_child = p;
		p->child = 0;
		p->height++;
	}
	else
	{
		p->parent->r_child = p;
		p->child = 1;
		p->height++;
	}
	if (p->r_child != nullptr)
	{
		temp->l_child = p->r_child;
		temp->l_child->child = 0;
		temp->l_child->parent = temp;


		p->r_child = temp;
		temp->parent = p;
		temp->child = 1;


	}
	else
	{

		temp->l_child = nullptr;
		temp->height = 1;

		p->r_child = temp;
		temp->parent = p;
		temp->child = 1;
	}
	node * temp2 = temp;
	bool heightDone = false;
	while (heightDone == false)
	{
		int h1 = 0, h2 = 0;
		if (temp2->r_child != nullptr)
			h1 = temp2->r_child->height;
		if (temp2->l_child != nullptr)
			h2 = temp2->l_child->height;

		if (h1 == 0 && h2 == 0)
		{
			temp2->height = 1;
		}
		else if (h2 >= h1)
			temp2->height = h2 + 1;
		else
			temp2->height = h1 + 1;

		if (temp2->parent != nullptr)
			temp2 = temp2->parent;
		else
			heightDone = true;
	}
}
void avl_tree::add_node(int i) {

	int pattern = 0;
	if (root == nullptr)
	{
		root = new node(i);
		root->child = -1;
		root->parent = nullptr;
		return;
	}
	node *tnode = root;
	node*temp = tnode;
	node *p(0);
	bool alreadyThere = false;
	while (alreadyThere == false)
	{
		if (temp == nullptr)
			break;
		if (temp->value == i)
			alreadyThere = true;
		else
		{
			if (temp->value > i)
			{
				temp = temp->l_child;
			}
			else
			{
				temp = temp->r_child;
			}
		}
	}
	if (alreadyThere == false)
	{
		bool workDone = false;
		while (workDone == false)
		{
			int h = tnode->height;

			if (tnode->l_child == nullptr)
			{
				if (tnode->r_child == nullptr)
				{
					if (tnode->value < i)
					{
						tnode->r_child = new node(i);
						tnode->r_child->parent = tnode;
						tnode->r_child->child = 1;
						p = height_adjustment(tnode->r_child, pattern);
						workDone = true;
					}
					else
					{
						tnode->l_child = new node(i);
						tnode->l_child->parent = tnode;
						tnode->l_child->child = 0;
						p = height_adjustment(tnode->l_child, pattern);
						workDone = true;
					}
				}
				else
				{
					if (tnode->value > i)
					{
						tnode->l_child = new node(i);
						tnode->l_child->parent = tnode;
						tnode->l_child->child = 0;
						p = height_adjustment(tnode->l_child, pattern);
						workDone = true;
					}
					else
					{
						tnode = tnode->r_child;
					}
				}
			}
			else
			{
				if (tnode->r_child == nullptr)
				{
					if (tnode->value <= i)
					{
						tnode->r_child = new node(i);
						tnode->r_child->parent = tnode;
						tnode->r_child->child = 1;
						p = height_adjustment(tnode->l_child, pattern);
						workDone = true;
					}
					else
					{
						tnode = tnode->l_child;
					}
				}
				else
				{
					if (tnode->value > i)
					{
						tnode = tnode->l_child;
					}
					else
					{
						tnode = tnode->r_child;
					}
				}
			}
			if (pattern != 0)
			{
				switch (pattern)
				{
				case 1:
				{
					R_Rotate(p->l_child);
					pattern = 0;
					break;
				}
				case 2:
				{
					L_Rotate(p->l_child->r_child);
					R_Rotate(p->l_child);
					pattern = 0;
					break;
				}
				case 3:
				{
					R_Rotate(p->r_child->l_child);
					L_Rotate(p->r_child);
					pattern = 0;
					break;
				}
				case 4:
				{
					L_Rotate(p->r_child);
					pattern = 0;
					break;
				}

				default:
					break;
				}
			}
		}
	}
}

node * avl_tree::height_adjustment(node *p, int &pattern)
{
	bool heightDone = false;
	bool adjustDone = false;
	node *temp = p;
	if (temp->height > 1)
	{
		if (temp->l_child == nullptr && temp->r_child == nullptr)
		{
			temp->height = 1;
		}
	}
	
	while (heightDone == false)
	{
		int h1 = 0, h2 = 0;
		if (temp->l_child != nullptr)
		{
			h1 = temp->l_child->height;
		}
		if (temp->r_child != nullptr)
			h2 = temp->r_child->height;

		if (h1 == 0 && h2 == 0)
		{
			temp->height = 1;
		}
		else if (h2 >= h1)
			temp->height = h2 + 1;
		else
			temp->height = h1 + 1;

		if (temp->parent != nullptr)
			temp = temp->parent;
		else
			heightDone = true;

	}
	while (adjustDone == false)
	{
		if (p == nullptr)
		{
			pattern = 0;
			return nullptr;
		}
		if (p->l_child != nullptr)
		{
			if (p->r_child != nullptr)
			{
				if ((p->l_child->height - p->r_child->height) > 1)
				{
					{
						if (p->l_child->l_child != nullptr)
						{
							if (p->l_child->r_child != nullptr)
							{
								if (p->l_child->l_child->height > p->l_child->r_child->height)
								{
									pattern = 1;
									return p;
								}
								else if (p->l_child->r_child->height > p->l_child->l_child->height)
								{
									pattern = 2;
									return p;
								}
								else
								{
									pattern = 1;
									return p;
								}
							}
							else
							{

								pattern = 1;
								return p;

							}
						}
						else
						{
							if (p->l_child->r_child != nullptr)
							{

								pattern = 2;
								return p;

							}
							else
								p = p->parent;
						}

					}
				}

				else if ((p->r_child->height - p->l_child->height) > 1)
				{
					{
						if (p->r_child->l_child != nullptr)
						{
							if (p->r_child->r_child != nullptr)
							{
								if (p->r_child->l_child->height > p->r_child->r_child->height)
								{
									pattern = 3;
									return p;
								}
								else if (p->r_child->r_child->height > p->r_child->l_child->height)
								{
									pattern = 4;
									return p;
								}
								else
								{
									pattern = 4;
									return p;
								}
							}
							else
							{

								pattern = 3;
								return p;

							}
						}
						else
						{
							if (p->r_child->r_child != nullptr)
							{

								pattern = 4;
								return p;

							}
							else
								p = p->parent;
						}

					}

				}
				else
				{
					p = p->parent;
				}
			}
			else
			{
				if (p->l_child->l_child != nullptr)
				{
					if (p->l_child->r_child != nullptr)
					{
						if (p->l_child->l_child->height > p->l_child->r_child->height)
						{
							pattern = 1;
							return p;
						}
						else if (p->l_child->r_child->height > p->l_child->l_child->height)
						{
							pattern = 2;
							return p;
						}
						else
						{
							pattern = 1;
							return p;
						}
					}
					else
					{

						pattern = 1;
						return p;

					}
				}
				else
				{
					if (p->l_child->r_child != nullptr)
					{

						pattern = 2;
						return p;

					}
					else
						p = p->parent;
				}

			}
		}

		else
		{
			if (p->r_child != nullptr)
			{
				if (p->r_child->l_child != nullptr)
				{
					if (p->r_child->r_child != nullptr)
					{
						if (p->r_child->l_child->height > p->r_child->r_child->height)
						{
							pattern = 3;
							return p;
						}
						else if (p->r_child->r_child->height > p->r_child->l_child->height)
						{
							pattern = 4;
							return p;
						}
						else
						{
							pattern = 4;
							return p;
						}
					}
					else
					{

						pattern = 3;
						return p;

					}
				}
				else
				{
					if (p->r_child->r_child != nullptr)
					{

						pattern = 4;
						return p;

					}
					else
						p = p->parent;
				}

			}
			else
				p = p->parent;
		}
	}

}

void avl_tree::in_order_traversal(node * p) {
	if (p == nullptr)  return;
	in_order_traversal(p->l_child);
	cout << "value = " << p->value << " " << "height = " << p->height << "   ";
	in_order_traversal(p->r_child);
}
void avl_tree::remove_node(int i)
{
	int pattern = 0;
	node *p(0);
	node *p1(0);
	bool gotIt = false;
	if (root == nullptr)
		return;
	node * temp = root;
	while (gotIt == false)
	{
		if (temp == nullptr)
			break;
		if (temp->value == i)
		{
			p = replace(temp);
			if (p != nullptr)
				p1 = height_adjustment(p, pattern);
			gotIt = true;
		}
		else
		{
			if (temp->value > i)
			{
				temp = temp->l_child;
			}
			else
			{
				temp = temp->r_child;
			}
		}
	}
	bool root_reached = false;
	while (root_reached == false)
	{
		if (pattern != 0)
		{
			switch (pattern)
			{
			case 1:
			{
				R_Rotate(p1->l_child);
				pattern = 0;
				break;
			}
			case 2:
			{
				L_Rotate(p1->l_child->r_child);
				R_Rotate(p1->l_child);
				pattern = 0;
				break;
			}
			case 3:
			{
				R_Rotate(p1->r_child->l_child);
				L_Rotate(p1->r_child);
				pattern = 0;
				break;
			}
			case 4:
			{
				L_Rotate(p1->r_child);
				pattern = 0;
				break;
			}

			default:
				break;
			}
		}

		if (p != nullptr)
		{
			if (p->parent != nullptr)
			{
				p = p->parent;
				p1 = height_adjustment(p, pattern);
			}
			else
				root_reached = true;
		}
		else
			root_reached = true;
	}
}

node* avl_tree::replace(node* p)
{
	node* tnode = p;
	int tempVal = -1;
	bool had_lchild = false;
	if (tnode->r_child != nullptr)
	{
		tnode = tnode->r_child;
		while (tnode->l_child != nullptr)
		{
			tnode = tnode->l_child;
			had_lchild = true;
		}
		tempVal = tnode->value;
		tnode->value = p->value;
		p->value = tempVal;
		if (tnode->child == 0)
			tnode->parent->l_child = nullptr;
		else if (tnode->child == 1)
		{
			
			if (tnode->r_child != nullptr)
			{
				tnode->parent->r_child = tnode->r_child;
			}
			else
				tnode->parent->r_child = nullptr;
		}
			return tnode->parent;
	}
	else if (tnode->l_child != nullptr)
	{
		tnode = tnode->l_child;
		while (tnode->r_child != nullptr)
		{
			tnode = tnode->r_child;
		}
		tempVal = tnode->value;
		tnode->value = p->value;
		p->value = tempVal;
		if (tnode->child == 0)
			tnode->parent->l_child = nullptr;
		else if (tnode->child == 1)
			tnode->parent->r_child = nullptr;
		return tnode->parent;
	}
	else
	{
		if (root == p)
		{
			root = nullptr;
			return nullptr;
		}
		else
		{
			if (tnode->child == 0)
				tnode->parent->l_child = nullptr;
			else if (tnode->child == 1)
				tnode->parent->r_child = nullptr;
			return tnode->parent;
		}

	}

}


int main() {
	avl_tree t1;
	t1.add_node(45);
	t1.in_order_traversal(t1.root);
	t1.remove_node(45);
	t1.in_order_traversal(t1.root);
	t1.add_node(50);
	t1.add_node(47);
	t1.add_node(30);
	t1.add_node(35);
	t1.in_order_traversal(t1.root);
	t1.remove_node(47);
	t1.in_order_traversal(t1.root);
	getchar();
	getchar();
	return 0;
}